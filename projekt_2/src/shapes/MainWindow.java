package shapes;

import java.awt.Color;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

public class MainWindow extends javax.swing.JFrame {

    private Color color = null;
    private Point point = null;

    public MainWindow() {
        initComponents();
        
        Border greyLine = BorderFactory.createLineBorder(Color.DARK_GRAY);
        canvasPanel.setBorder(greyLine);
        canvasPanel.setBackground(new Color(250, 250, 240));
        controlPanel.setBackground(new Color(245, 245, 250));
        buttonColor.setText("Choose color");
        buttonAdd.setText("Add shape");
        buttonClear.setText("Clear");
        buttonShapes.setText("List of shapes");
        buttonCredits.setText("Credits");
        buttonClose.setText("Close");
        drawInitialShapes();
        updateLabels();

    }

    private void drawInitialShapes() {
        Color color1 = new Color(0x84, 0xb4, 0xc8, 0xd0);
        Color color2 = new Color(0x8e, 0xc9, 0xbb, 0xd0);
        Color color3 = new Color(0xf4, 0xdc, 0xd6, 0xd0);
        Circle c = new Circle(color1, new Point(200, 200), 70);
        canvas.shapes.add(c.getCircumscribedSquare(color3));
        canvas.shapes.add(c);
        Rectangle r = new Rectangle(color1, new Point(520, 350), 130, 90);
        canvas.shapes.add(r.getCircumscribedCircle(color3));
        canvas.shapes.add(r);
        Ellipse e = new Ellipse(color2, new Point(410, 250), 90, 150);
        canvas.shapes.add(e);
        canvas.shapes.add(e.getInscribedCircle(color3));
        Square s = new Square(color1, new Point(600, 80), 90);
        canvas.shapes.add(s);
        canvas.shapes.add(s.getInscribedCircle(color3));
        canvas.rePaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvasPanel = new javax.swing.JPanel();
        canvas = new shapes.DrawingCanvas();
        controlPanel = new javax.swing.JPanel();
        pointLabel = new javax.swing.JLabel();
        colorLabel = new javax.swing.JLabel();
        buttonCredits = new javax.swing.JButton();
        buttonClose = new javax.swing.JButton();
        buttonColor = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();
        buttonShapes = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvasMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout canvasPanelLayout = new javax.swing.GroupLayout(canvasPanel);
        canvasPanel.setLayout(canvasPanelLayout);
        canvasPanelLayout.setHorizontalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        canvasPanelLayout.setVerticalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(canvas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
        );

        pointLabel.setText("jLabel1");

        colorLabel.setText("jLabel2");

        buttonCredits.setText("jButton1");
        buttonCredits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCreditsActionPerformed(evt);
            }
        });

        buttonClose.setText("jButton2");
        buttonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCloseActionPerformed(evt);
            }
        });

        buttonColor.setText("jButton3");
        buttonColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonColorActionPerformed(evt);
            }
        });

        buttonAdd.setText("jButton4");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonClear.setText("jButton5");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        buttonShapes.setText("jButton6");
        buttonShapes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonShapesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pointLabel)
                    .addComponent(buttonColor, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(colorLabel)
                    .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 182, Short.MAX_VALUE)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonClear, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(buttonCredits, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(53, 53, 53)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonClose, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(buttonShapes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonColor)
                    .addComponent(buttonAdd)
                    .addComponent(buttonClear)
                    .addComponent(buttonShapes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pointLabel)
                    .addComponent(colorLabel)
                    .addComponent(buttonCredits)
                    .addComponent(buttonClose))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(controlPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(canvasPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(canvasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actionClose() {
        this.dispose();
    }

    private void actionCredits() {
        JOptionPane.showMessageDialog(this, "Developed by MÅ», index:285298", "Credits",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void actionShowShapes() {
        ArrayList<Shape> shapes = canvas.shapes;
        String str = "";
        for (Shape s : shapes) {
            str += s + "\n";
        }
        JOptionPane.showMessageDialog(this, str, "List of shapes",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void actionChooseColor() {
        String result = JOptionPane.showInputDialog(this, "Choose color in format r:g:b, if left empty the color will be random.",
                "100:149:237");
        try {
            if (result != null) { // Check if user canceled the input dialog
                if (result.isEmpty()) {
                    
                    Random random = new Random();
                    int red = random.nextInt(256);
                    int green = random.nextInt(256);
                    int blue = random.nextInt(256);
                    color = new Color(red, green, blue);
                } else {
                    // Split the input string by ":"
                    String[] components = result.split(":");
                    if (components.length != 3) {
                        throw new IllegalArgumentException("Input must contain exactly three values separated by ':'");
                    }
                    
                    int red = Integer.parseInt(components[0]);
                    int green = Integer.parseInt(components[1]);
                    int blue = Integer.parseInt(components[2]);
                    // Check if RGB values are within valid range
                    if (red < 0 || red > 255 || green < 0 || green > 255 || blue < 0 || blue > 255) {
                        throw new IllegalArgumentException("RGB values must be between 0 and 255");
                    }
                    // Create a new Color object with the parsed RGB values
                    color = new Color(red, green, blue);
                }
                updateLabels();
            }
        } catch (NumberFormatException e) {
            
            JOptionPane.showMessageDialog(this, "Invalid input: RGB values must be integers", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateLabels() {
        if (color == null) {
            colorLabel.setText("Color: ---");
        } else {
            int r = color.getRed();
            int g = color.getGreen();
            int b = color.getBlue();
            colorLabel.setText("Color: " + r + ":" + g + ":" + b);
            colorLabel.setForeground(color);
        }
        if (point == null) {
            pointLabel.setText("Center: ---");
        } else {
            pointLabel.setText("Center: " + point);
        }
    }

    private void actionClear() {
        canvas.shapes.clear();
        canvas.rePaint();
    }

    private void actionPointClicked(MouseEvent e) {
        int x = e.getX();
        int y = e.getY();
        point = new Point(x, y);
        updateLabels();
    }

    private void actionAdd() {
        try {
            if (point == null || color == null) {
                throw new IllegalArgumentException("Center and color must be selected");
            }
            String[] options = {"Circle", "Ellipse", "Rectangle", "Square"};
            JComboBox<String> comboBox = new JComboBox<>(options);

            
            int result = JOptionPane.showConfirmDialog(this, comboBox, "Choose shape", JOptionPane.OK_CANCEL_OPTION);

            // Check if the user clicked OK
            if (result == JOptionPane.OK_OPTION) {
                // Get the selected item from the combo box
                String selectedOption = (String) comboBox.getSelectedItem();

                switch (selectedOption) {
                    case "Circle":
                        String radiusStr = JOptionPane.showInputDialog(this, "Enter radius length", "80");
                        if (radiusStr != null) {
                            int radius = Integer.parseInt(radiusStr);

                            Circle c = new Circle(color, point, radius);
                            canvas.shapes.add(c);
                        }
                        break;

                    case "Square":
                        String sideStr = JOptionPane.showInputDialog(this, "Enter side length", "80");
                        if (sideStr != null) {
                            int side = Integer.parseInt(sideStr);
                            Square s = new Square(color, point, side);
                            canvas.shapes.add(s);
                        }
                        break;

                    case "Ellipse":
                        String axStr = JOptionPane.showInputDialog(this, "Enter axis in format ax1:ax2", "80:40");
                        if (axStr != null) {
                            String[] axValues = axStr.split(":");
                            if (axValues.length == 2) {
                                int ax1 = Integer.parseInt(axValues[0]);
                                int ax2 = Integer.parseInt(axValues[1]);
                                Ellipse e = new Ellipse(color, point, ax1, ax2);
                                canvas.shapes.add(e);
                            } else {
                                throw new IllegalArgumentException("Invalid format");
                            }
                        }
                        break;

                    case "Rectangle":
                        String sidesStr = JOptionPane.showInputDialog(this, "Enter length of sides in format a:b", "80:40");
                        if (sidesStr != null) {
                            String[] sidesValues = sidesStr.split(":");
                            if (sidesValues.length == 2) {
                                int a = Integer.parseInt(sidesValues[0]);
                                int b = Integer.parseInt(sidesValues[1]);
                                Rectangle r = new Rectangle(color, point, a, b);
                                canvas.shapes.add(r);
                            }
                        }
                        

                }
                canvas.rePaint();

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid input: Please enter an integer",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    private void buttonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCloseActionPerformed
        actionClose();
    }//GEN-LAST:event_buttonCloseActionPerformed

    private void buttonCreditsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCreditsActionPerformed
        actionCredits();
    }//GEN-LAST:event_buttonCreditsActionPerformed

    private void buttonColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonColorActionPerformed
        actionChooseColor();
    }//GEN-LAST:event_buttonColorActionPerformed

    private void buttonShapesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonShapesActionPerformed
        actionShowShapes();
    }//GEN-LAST:event_buttonShapesActionPerformed

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        actionClear();
    }//GEN-LAST:event_buttonClearActionPerformed

    private void canvasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseClicked
        actionPointClicked(evt);
    }//GEN-LAST:event_canvasMouseClicked

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        actionAdd();
    }//GEN-LAST:event_buttonAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonClose;
    private javax.swing.JButton buttonColor;
    private javax.swing.JButton buttonCredits;
    private javax.swing.JButton buttonShapes;
    private shapes.DrawingCanvas canvas;
    private javax.swing.JPanel canvasPanel;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JLabel pointLabel;
    // End of variables declaration//GEN-END:variables
}
